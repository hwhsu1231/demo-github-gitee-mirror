name: ci-mirror-repository

on:
  workflow_dispatch:
  push:
    branches: 
      - master
  schedule:
    - cron: '20 20 * * *'

jobs:
  # check-preconditions:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     results: ${{ join(steps.*.outcome) }}
  #   steps:
  #     - id: secrets
  #       continue-on-error: true
  #       run: '[ -n "$SSH_PRIVATE_KEY" ]'
  #       env:
  #         SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  precondition:
    runs-on: ubuntu-latest
    steps:
      - name: Check Secrets
        shell: bash
        run: |
          SECRETS_EXIST=true
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "secrets.SSH_PRIVATE_KEY is missing."
            SECRETS_EXIST=false
          fi
          if [ "$SECRETS_EXIST" = "false" ]; then
            exit 1
          fi
      # - name: Check Variables
      #   shell: bash
      #   run: |
      #     VARIABLES_EXIST=true
      #     if [ -z "${{ vars.ACTOR_ID }}" ]; then
      #       echo "vars.ACTOR_ID is missing."
      #       VARIABLES_EXIST=false
      #     fi
      #     if [ -z "${{ vars.ACTOR_NAME }}" ]; then
      #       echo "vars.ACTOR_NAME is missing."
      #       VARIABLES_EXIST=false
      #     fi
      #     if [ -z "${{ vars.ACTOR_LOGIN }}" ]; then
      #       echo "vars.ACTOR_LOGIN is missing."
      #       VARIABLES_EXIST=false
      #     fi
      #     if [ "$VARIABLES_EXIST" = "false" ]; then
      #       exit 1
      #     fi

  get-matrix:
    runs-on: ubuntu-latest
    outputs:
      SERVER_LIST: ${{ steps.gvl.outputs.SERVER_LIST }}
    steps:
      - name: Checkout to '${{ github.ref }}'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Get SERVER_LIST from mirrors.json
        id: gvl
        shell: bash
        run: |
          # JQ_FILE="mirrors.json"
          # JQ_FILTER=".mirrors | map(.SERVER)"
          # SERVER_LIST=$(jq -c "${JQ_FILTER}" "${JQ_FILE}")
          # echo "SERVER_LIST=${SERVER_LIST}" >> ${GITHUB_OUTPUT}
          # echo "SERVER_LIST:"
          # echo "${SERVER_LIST}" | jq "."

          # JQ_FILE="mirrors.json"
          # JQ_FILTER='.mirrors | map({
          #   server: .SERVER,
          #   repository: if .REPOSITORY == "[default]" then "'${{ github.repository }}'" else .REPOSITORY end
          # })'
          # SERVER_LIST=$(jq -c "${JQ_FILTER}" "${JQ_FILE}")
          # echo "SERVER_LIST=${SERVER_LIST}" >> ${GITHUB_OUTPUT}
          # echo "SERVER_LIST:"
          # echo "${SERVER_LIST}" | jq "."

          # DEFAULT_REPO="${GITHUB_REPOSITORY}"
          # MATRIX=$(jq -c --arg default_repo "$DEFAULT_REPO" '
          #   { include: [
          #     .mirrors[] | {
          #       SERVER: .SERVER,
          #       REPOSITORY: if .REPOSITORY == "[default]" then $default_repo else .REPOSITORY end
          #     }
          #   ]}' mirrors.json)

          # MATRIX=$(jq -c '{include: .mirrors}' mirrors.json)

          MATRIX=$(jq -c '{ include: [ .mirrors[] | { SERVER: .SERVER } ] }' mirrors.json)

          echo "MATRIX:"
          echo "${MATRIX}" | jq "."

  # matrix:
  #   needs: get-matrix
  #   concurrency:
  #     group: ${{ github.workflow }}-${{ matrix.SERVER }}
  #     cancel-in-progress: true
  #   strategy:
  #     matrix:
  #       SERVER: ${{ fromJSON(needs.get-matrix.outputs.SERVER_LIST) }}
  #     fail-fast: false
  #   uses: ./.github/workflows/use-mirror-repository.yml
  #   with:
  #     GIT_TARGET_SERVER: ${{ matrix.SERVER }}
  #     GIT_TARGET_REPO: ${{ github.repository }}
  #   secrets:
  #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
